<?php
namespace Sdl\LiteralType;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-03 at 01:22:42.
 */
class TypeFactoryTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Sdl\LiteralType\TypeFactory::createFromToken
     * @todo   Implement testCreateFromToken().
     */
    public function testCreateFromToken()
    {
        $int_type = TypeFactory::createFromString("123");
        $this->assertEquals("SdlInteger", $int_type->getType());

        $float_type = TypeFactory::createFromString("123f");
        $this->assertEquals("SdlFloat", $float_type->getType());

        $bool_type = TypeFactory::createFromString("true");
        $this->assertEquals("SdlBoolean", $bool_type->getType());

        $str_type = TypeFactory::createFromString("\"123\"");
        $this->assertEquals("SdlString", $str_type->getType());

    }

    /**
     * @covers Sdl\LiteralType\TypeFactory::createFromPhpValue
     * @todo   Implement testCreateFromPhpValue().
     */
    public function testCreateFromPhpValue()
    {
        // Test integers
        $int_type = TypeFactory::createFromPhpValue((int)42);
        $this->assertEquals("SdlInteger", $int_type->getType());
        // Test floats
        $double_type = TypeFactory::createFromPhpValue((double)4.2);
        $this->assertEquals("SdlDouble", $double_type->getType());
        $float_type = TypeFactory::createFromPhpValue((float)4.2);
        $this->assertEquals("SdlDouble", $float_type->getType());
        // Test booleans
        $bool_type = TypeFactory::createFromPhpValue(true);
        $this->assertEquals("SdlBoolean", $bool_type->getType());
        // Test strings
        $str_type = TypeFactory::createFromPhpValue("foo");
        $this->assertEquals("SdlString", $str_type->getType());
    }
}
